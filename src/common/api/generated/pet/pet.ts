/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.27
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApiResponse,
  FindPetsByStatusParams,
  FindPetsByTagsParams,
  Pet,
  UpdatePetWithFormParams,
  UploadFileParams
} from '.././types';

import { customInstance } from '../../mutator/custom-instance';
import type { ErrorType } from '../../mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Update an existing pet by Id.
 * @summary Update an existing pet.
 */
export const updatePet = (
    pet: Pet,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<Pet>(
      {url: `/pet`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: pet
    },
      options);
    }
  


export const getUpdatePetMutationOptions = <TError = ErrorType<null | null | null | null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePet>>, TError,{data: Pet}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updatePet>>, TError,{data: Pet}, TContext> => {

const mutationKey = ['updatePet'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePet>>, {data: Pet}> = (props) => {
          const {data} = props ?? {};

          return  updatePet(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePetMutationResult = NonNullable<Awaited<ReturnType<typeof updatePet>>>
    export type UpdatePetMutationBody = Pet
    export type UpdatePetMutationError = ErrorType<null | null | null | null>

    /**
 * @summary Update an existing pet.
 */
export const useUpdatePet = <TError = ErrorType<null | null | null | null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePet>>, TError,{data: Pet}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updatePet>>,
        TError,
        {data: Pet},
        TContext
      > => {

      const mutationOptions = getUpdatePetMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Add a new pet to the store.
 * @summary Add a new pet to the store.
 */
export const addPet = (
    pet: Pet,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Pet>(
      {url: `/pet`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: pet, signal
    },
      options);
    }
  


export const getAddPetMutationOptions = <TError = ErrorType<null | null | null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPet>>, TError,{data: Pet}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof addPet>>, TError,{data: Pet}, TContext> => {

const mutationKey = ['addPet'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addPet>>, {data: Pet}> = (props) => {
          const {data} = props ?? {};

          return  addPet(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddPetMutationResult = NonNullable<Awaited<ReturnType<typeof addPet>>>
    export type AddPetMutationBody = Pet
    export type AddPetMutationError = ErrorType<null | null | null>

    /**
 * @summary Add a new pet to the store.
 */
export const useAddPet = <TError = ErrorType<null | null | null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPet>>, TError,{data: Pet}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof addPet>>,
        TError,
        {data: Pet},
        TContext
      > => {

      const mutationOptions = getAddPetMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Multiple status values can be provided with comma separated strings.
 * @summary Finds Pets by status.
 */
export const findPetsByStatus = (
    params: FindPetsByStatusParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Pet[]>(
      {url: `/pet/findByStatus`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getFindPetsByStatusQueryKey = (params?: FindPetsByStatusParams,) => {
    return [`/pet/findByStatus`, ...(params ? [params]: [])] as const;
    }

    
export const getFindPetsByStatusInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof findPetsByStatus>>, TError = ErrorType<null | null>>(params: FindPetsByStatusParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof findPetsByStatus>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindPetsByStatusQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findPetsByStatus>>> = ({ signal }) => findPetsByStatus(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findPetsByStatus>>, TError, TData> & { queryKey: QueryKey }
}

export type FindPetsByStatusInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findPetsByStatus>>>
export type FindPetsByStatusInfiniteQueryError = ErrorType<null | null>


/**
 * @summary Finds Pets by status.
 */

export function useFindPetsByStatusInfinite<TData = Awaited<ReturnType<typeof findPetsByStatus>>, TError = ErrorType<null | null>>(
 params: FindPetsByStatusParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof findPetsByStatus>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindPetsByStatusInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions ) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindPetsByStatusQueryOptions = <TData = Awaited<ReturnType<typeof findPetsByStatus>>, TError = ErrorType<null | null>>(params: FindPetsByStatusParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findPetsByStatus>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindPetsByStatusQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findPetsByStatus>>> = ({ signal }) => findPetsByStatus(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findPetsByStatus>>, TError, TData> & { queryKey: QueryKey }
}

export type FindPetsByStatusQueryResult = NonNullable<Awaited<ReturnType<typeof findPetsByStatus>>>
export type FindPetsByStatusQueryError = ErrorType<null | null>


/**
 * @summary Finds Pets by status.
 */

export function useFindPetsByStatus<TData = Awaited<ReturnType<typeof findPetsByStatus>>, TError = ErrorType<null | null>>(
 params: FindPetsByStatusParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findPetsByStatus>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindPetsByStatusQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @summary Finds Pets by tags.
 */
export const findPetsByTags = (
    params: FindPetsByTagsParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Pet[]>(
      {url: `/pet/findByTags`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getFindPetsByTagsQueryKey = (params?: FindPetsByTagsParams,) => {
    return [`/pet/findByTags`, ...(params ? [params]: [])] as const;
    }

    
export const getFindPetsByTagsInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof findPetsByTags>>, TError = ErrorType<null | null>>(params: FindPetsByTagsParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof findPetsByTags>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindPetsByTagsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findPetsByTags>>> = ({ signal }) => findPetsByTags(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof findPetsByTags>>, TError, TData> & { queryKey: QueryKey }
}

export type FindPetsByTagsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findPetsByTags>>>
export type FindPetsByTagsInfiniteQueryError = ErrorType<null | null>


/**
 * @summary Finds Pets by tags.
 */

export function useFindPetsByTagsInfinite<TData = Awaited<ReturnType<typeof findPetsByTags>>, TError = ErrorType<null | null>>(
 params: FindPetsByTagsParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof findPetsByTags>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindPetsByTagsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions ) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindPetsByTagsQueryOptions = <TData = Awaited<ReturnType<typeof findPetsByTags>>, TError = ErrorType<null | null>>(params: FindPetsByTagsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findPetsByTags>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindPetsByTagsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findPetsByTags>>> = ({ signal }) => findPetsByTags(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findPetsByTags>>, TError, TData> & { queryKey: QueryKey }
}

export type FindPetsByTagsQueryResult = NonNullable<Awaited<ReturnType<typeof findPetsByTags>>>
export type FindPetsByTagsQueryError = ErrorType<null | null>


/**
 * @summary Finds Pets by tags.
 */

export function useFindPetsByTags<TData = Awaited<ReturnType<typeof findPetsByTags>>, TError = ErrorType<null | null>>(
 params: FindPetsByTagsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findPetsByTags>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindPetsByTagsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Returns a single pet.
 * @summary Find pet by ID.
 */
export const getPetById = (
    petId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Pet>(
      {url: `/pet/${petId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPetByIdQueryKey = (petId?: number,) => {
    return [`/pet/${petId}`] as const;
    }

    
export const getGetPetByIdInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getPetById>>, TError = ErrorType<null | null | null>>(petId: number, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPetById>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPetByIdQueryKey(petId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPetById>>> = ({ signal }) => getPetById(petId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(petId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPetById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPetByIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getPetById>>>
export type GetPetByIdInfiniteQueryError = ErrorType<null | null | null>


/**
 * @summary Find pet by ID.
 */

export function useGetPetByIdInfinite<TData = Awaited<ReturnType<typeof getPetById>>, TError = ErrorType<null | null | null>>(
 petId: number, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPetById>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetPetByIdInfiniteQueryOptions(petId,options)

  const query = useInfiniteQuery(queryOptions ) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetPetByIdQueryOptions = <TData = Awaited<ReturnType<typeof getPetById>>, TError = ErrorType<null | null | null>>(petId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPetById>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPetByIdQueryKey(petId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPetById>>> = ({ signal }) => getPetById(petId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(petId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPetById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPetByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPetById>>>
export type GetPetByIdQueryError = ErrorType<null | null | null>


/**
 * @summary Find pet by ID.
 */

export function useGetPetById<TData = Awaited<ReturnType<typeof getPetById>>, TError = ErrorType<null | null | null>>(
 petId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPetById>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetPetByIdQueryOptions(petId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Updates a pet resource based on the form data.
 * @summary Updates a pet in the store with form data.
 */
export const updatePetWithForm = (
    petId: number,
    params?: UpdatePetWithFormParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Pet>(
      {url: `/pet/${petId}`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getUpdatePetWithFormMutationOptions = <TError = ErrorType<null | null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePetWithForm>>, TError,{petId: number;params?: UpdatePetWithFormParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updatePetWithForm>>, TError,{petId: number;params?: UpdatePetWithFormParams}, TContext> => {

const mutationKey = ['updatePetWithForm'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePetWithForm>>, {petId: number;params?: UpdatePetWithFormParams}> = (props) => {
          const {petId,params} = props ?? {};

          return  updatePetWithForm(petId,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePetWithFormMutationResult = NonNullable<Awaited<ReturnType<typeof updatePetWithForm>>>
    
    export type UpdatePetWithFormMutationError = ErrorType<null | null>

    /**
 * @summary Updates a pet in the store with form data.
 */
export const useUpdatePetWithForm = <TError = ErrorType<null | null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePetWithForm>>, TError,{petId: number;params?: UpdatePetWithFormParams}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updatePetWithForm>>,
        TError,
        {petId: number;params?: UpdatePetWithFormParams},
        TContext
      > => {

      const mutationOptions = getUpdatePetWithFormMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Delete a pet.
 * @summary Deletes a pet.
 */
export const deletePet = (
    petId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<null>(
      {url: `/pet/${petId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeletePetMutationOptions = <TError = ErrorType<null | null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePet>>, TError,{petId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deletePet>>, TError,{petId: number}, TContext> => {

const mutationKey = ['deletePet'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePet>>, {petId: number}> = (props) => {
          const {petId} = props ?? {};

          return  deletePet(petId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePetMutationResult = NonNullable<Awaited<ReturnType<typeof deletePet>>>
    
    export type DeletePetMutationError = ErrorType<null | null>

    /**
 * @summary Deletes a pet.
 */
export const useDeletePet = <TError = ErrorType<null | null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePet>>, TError,{petId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deletePet>>,
        TError,
        {petId: number},
        TContext
      > => {

      const mutationOptions = getDeletePetMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Upload image of the pet.
 * @summary Uploads an image.
 */
export const uploadFile = (
    petId: number,
    uploadFileBody: Blob,
    params?: UploadFileParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ApiResponse>(
      {url: `/pet/${petId}/uploadImage`, method: 'POST',
      headers: {'Content-Type': 'application/octet-stream', },
      data: uploadFileBody,
        params, signal
    },
      options);
    }
  


export const getUploadFileMutationOptions = <TError = ErrorType<null | null | null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadFile>>, TError,{petId: number;data: Blob;params?: UploadFileParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof uploadFile>>, TError,{petId: number;data: Blob;params?: UploadFileParams}, TContext> => {

const mutationKey = ['uploadFile'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadFile>>, {petId: number;data: Blob;params?: UploadFileParams}> = (props) => {
          const {petId,data,params} = props ?? {};

          return  uploadFile(petId,data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadFileMutationResult = NonNullable<Awaited<ReturnType<typeof uploadFile>>>
    export type UploadFileMutationBody = Blob
    export type UploadFileMutationError = ErrorType<null | null | null>

    /**
 * @summary Uploads an image.
 */
export const useUploadFile = <TError = ErrorType<null | null | null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadFile>>, TError,{petId: number;data: Blob;params?: UploadFileParams}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof uploadFile>>,
        TError,
        {petId: number;data: Blob;params?: UploadFileParams},
        TContext
      > => {

      const mutationOptions = getUploadFileMutationOptions(options);

      return useMutation(mutationOptions );
    }
    