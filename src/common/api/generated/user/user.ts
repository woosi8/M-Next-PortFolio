/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.27
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  LoginUserParams,
  User
} from '.././types';

import { customInstance } from '../../mutator/custom-instance';
import type { ErrorType } from '../../mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * This can only be done by the logged in user.
 * @summary Create user.
 */
export const createUser = (
    user: User,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<User>(
      {url: `/user`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: user, signal
    },
      options);
    }
  


export const getCreateUserMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: User}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: User}, TContext> => {

const mutationKey = ['createUser'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUser>>, {data: User}> = (props) => {
          const {data} = props ?? {};

          return  createUser(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>
    export type CreateUserMutationBody = User
    export type CreateUserMutationError = ErrorType<null>

    /**
 * @summary Create user.
 */
export const useCreateUser = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: User}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createUser>>,
        TError,
        {data: User},
        TContext
      > => {

      const mutationOptions = getCreateUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Creates list of users with given input array.
 * @summary Creates list of users with given input array.
 */
export const createUsersWithListInput = (
    user: User[],
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<User>(
      {url: `/user/createWithList`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: user, signal
    },
      options);
    }
  


export const getCreateUsersWithListInputMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUsersWithListInput>>, TError,{data: User[]}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createUsersWithListInput>>, TError,{data: User[]}, TContext> => {

const mutationKey = ['createUsersWithListInput'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUsersWithListInput>>, {data: User[]}> = (props) => {
          const {data} = props ?? {};

          return  createUsersWithListInput(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateUsersWithListInputMutationResult = NonNullable<Awaited<ReturnType<typeof createUsersWithListInput>>>
    export type CreateUsersWithListInputMutationBody = User[]
    export type CreateUsersWithListInputMutationError = ErrorType<null>

    /**
 * @summary Creates list of users with given input array.
 */
export const useCreateUsersWithListInput = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUsersWithListInput>>, TError,{data: User[]}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createUsersWithListInput>>,
        TError,
        {data: User[]},
        TContext
      > => {

      const mutationOptions = getCreateUsersWithListInputMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Log into the system.
 * @summary Logs user into the system.
 */
export const loginUser = (
    params?: LoginUserParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string>(
      {url: `/user/login`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getLoginUserQueryKey = (params?: LoginUserParams,) => {
    return [`/user/login`, ...(params ? [params]: [])] as const;
    }

    
export const getLoginUserInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof loginUser>>, TError = ErrorType<null | null>>(params?: LoginUserParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLoginUserQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof loginUser>>> = ({ signal }) => loginUser(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData> & { queryKey: QueryKey }
}

export type LoginUserInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof loginUser>>>
export type LoginUserInfiniteQueryError = ErrorType<null | null>


/**
 * @summary Logs user into the system.
 */

export function useLoginUserInfinite<TData = Awaited<ReturnType<typeof loginUser>>, TError = ErrorType<null | null>>(
 params?: LoginUserParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getLoginUserInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions ) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getLoginUserQueryOptions = <TData = Awaited<ReturnType<typeof loginUser>>, TError = ErrorType<null | null>>(params?: LoginUserParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLoginUserQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof loginUser>>> = ({ signal }) => loginUser(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData> & { queryKey: QueryKey }
}

export type LoginUserQueryResult = NonNullable<Awaited<ReturnType<typeof loginUser>>>
export type LoginUserQueryError = ErrorType<null | null>


/**
 * @summary Logs user into the system.
 */

export function useLoginUser<TData = Awaited<ReturnType<typeof loginUser>>, TError = ErrorType<null | null>>(
 params?: LoginUserParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getLoginUserQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Log user out of the system.
 * @summary Logs out current logged in user session.
 */
export const logoutUser = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<null>(
      {url: `/user/logout`, method: 'GET', signal
    },
      options);
    }
  

export const getLogoutUserQueryKey = () => {
    return [`/user/logout`] as const;
    }

    
export const getLogoutUserInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof logoutUser>>, TError = ErrorType<null>>( options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLogoutUserQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof logoutUser>>> = ({ signal }) => logoutUser(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData> & { queryKey: QueryKey }
}

export type LogoutUserInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof logoutUser>>>
export type LogoutUserInfiniteQueryError = ErrorType<null>


/**
 * @summary Logs out current logged in user session.
 */

export function useLogoutUserInfinite<TData = Awaited<ReturnType<typeof logoutUser>>, TError = ErrorType<null>>(
  options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getLogoutUserInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions ) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getLogoutUserQueryOptions = <TData = Awaited<ReturnType<typeof logoutUser>>, TError = ErrorType<null>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLogoutUserQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof logoutUser>>> = ({ signal }) => logoutUser(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData> & { queryKey: QueryKey }
}

export type LogoutUserQueryResult = NonNullable<Awaited<ReturnType<typeof logoutUser>>>
export type LogoutUserQueryError = ErrorType<null>


/**
 * @summary Logs out current logged in user session.
 */

export function useLogoutUser<TData = Awaited<ReturnType<typeof logoutUser>>, TError = ErrorType<null>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getLogoutUserQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get user detail based on username.
 * @summary Get user by user name.
 */
export const getUserByName = (
    username: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<User>(
      {url: `/user/${username}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserByNameQueryKey = (username?: string,) => {
    return [`/user/${username}`] as const;
    }

    
export const getGetUserByNameInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getUserByName>>, TError = ErrorType<null | null | null>>(username: string, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserByNameQueryKey(username);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserByName>>> = ({ signal }) => getUserByName(username, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(username), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserByNameInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserByName>>>
export type GetUserByNameInfiniteQueryError = ErrorType<null | null | null>


/**
 * @summary Get user by user name.
 */

export function useGetUserByNameInfinite<TData = Awaited<ReturnType<typeof getUserByName>>, TError = ErrorType<null | null | null>>(
 username: string, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUserByNameInfiniteQueryOptions(username,options)

  const query = useInfiniteQuery(queryOptions ) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUserByNameQueryOptions = <TData = Awaited<ReturnType<typeof getUserByName>>, TError = ErrorType<null | null | null>>(username: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserByNameQueryKey(username);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserByName>>> = ({ signal }) => getUserByName(username, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(username), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserByNameQueryResult = NonNullable<Awaited<ReturnType<typeof getUserByName>>>
export type GetUserByNameQueryError = ErrorType<null | null | null>


/**
 * @summary Get user by user name.
 */

export function useGetUserByName<TData = Awaited<ReturnType<typeof getUserByName>>, TError = ErrorType<null | null | null>>(
 username: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUserByNameQueryOptions(username,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This can only be done by the logged in user.
 * @summary Update user resource.
 */
export const updateUser = (
    username: string,
    user: User,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<null>(
      {url: `/user/${username}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: user
    },
      options);
    }
  


export const getUpdateUserMutationOptions = <TError = ErrorType<null | null | null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{username: string;data: User}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{username: string;data: User}, TContext> => {

const mutationKey = ['updateUser'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUser>>, {username: string;data: User}> = (props) => {
          const {username,data} = props ?? {};

          return  updateUser(username,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateUser>>>
    export type UpdateUserMutationBody = User
    export type UpdateUserMutationError = ErrorType<null | null | null>

    /**
 * @summary Update user resource.
 */
export const useUpdateUser = <TError = ErrorType<null | null | null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{username: string;data: User}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateUser>>,
        TError,
        {username: string;data: User},
        TContext
      > => {

      const mutationOptions = getUpdateUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * This can only be done by the logged in user.
 * @summary Delete user resource.
 */
export const deleteUser = (
    username: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<null>(
      {url: `/user/${username}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteUserMutationOptions = <TError = ErrorType<null | null | null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{username: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{username: string}, TContext> => {

const mutationKey = ['deleteUser'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUser>>, {username: string}> = (props) => {
          const {username} = props ?? {};

          return  deleteUser(username,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUser>>>
    
    export type DeleteUserMutationError = ErrorType<null | null | null>

    /**
 * @summary Delete user resource.
 */
export const useDeleteUser = <TError = ErrorType<null | null | null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{username: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteUser>>,
        TError,
        {username: string},
        TContext
      > => {

      const mutationOptions = getDeleteUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    